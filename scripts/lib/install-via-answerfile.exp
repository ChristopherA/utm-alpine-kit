#!/usr/bin/expect -f
# Alpine Linux automated installation using answer file
# This bypasses password prompt by using ROOTSSHKEY in answer file

set timeout 180
log_user 1

proc log_step {msg} {
    puts "\n==> $msg\n"
}

# Get host IP for answer file URL (expect script detects it directly)
set host_ip "192.168.1.1"
catch {
    set host_ip [exec sh -c "ipconfig getifaddr en0 || ipconfig getifaddr en1"]
}

set answer_url "http://${host_ip}:8888/alpine-answer.txt"
log_step "Answer file URL: $answer_url"

# Connect to VM serial console (using socat for robust ANSI handling)
log_step "Connecting to VM serial console"
spawn socat - TCP:localhost:4444

# Wait for login prompt and login as root
send "\r"
expect {
    -re "login:" {
        send "root\r"
        expect -re ":~#"
    }
    timeout {
        puts "ERROR: Timeout waiting for login prompt"
        exit 1
    }
}

# Configure network to reach answer file server
log_step "Configuring network (DHCP)"
send "setup-interfaces\r"
sleep 1

# Handle all setup-interfaces prompts in sequence
expect {
    -re "initialize" {
        send "eth0\r"
        exp_continue
    }
    -re "Ip address" {
        send "dhcp\r"
        exp_continue
    }
    -re "manual" {
        send "n\r"
        # After manual prompt, setup-interfaces completes
        expect -re ":~#"
    }
    timeout {
        puts "ERROR: Network configuration timeout"
        exit 1
    }
}

send "ifup eth0\r"
expect {
    -re "lease.*obtained" {
        # DHCP lease acquired
    }
    -re "udhcpc" {
        # udhcpc output seen
    }
    timeout {
        puts "ERROR: ifup timeout"
        exit 1
    }
}
sleep 3

# Verify network connectivity
log_step "Verifying network connectivity"
send "ip addr show eth0 | grep 'inet '\r"
expect {
    -re "inet " {
        # IP address assigned
    }
    timeout {
        puts "ERROR: No IP address"
        exit 1
    }
}

# Setup APK repositories
log_step "Configuring APK repositories"
send "setup-apkrepos -1\r"
expect {
    -re "mirror" { send "1\r"; exp_continue }
    -re "Updating repository indexes.*done" {
        # Repository setup complete
    }
    timeout {
        puts "ERROR: APK repository setup timeout"
        exit 1
    }
}
sleep 1

send "apk update --no-progress\r"
expect {
    -re "OK:.*packages available" {
        # APK update complete
    }
    timeout {
        puts "ERROR: apk update timeout"
        exit 1
    }
}
sleep 1

# Install wget to download answer file
log_step "Installing wget"
send "apk add --no-progress wget\r"
expect {
    -re "OK:.*packages" {
        # wget installed
    }
    timeout {
        puts "ERROR: wget installation timeout"
        exit 1
    }
}
sleep 1

# Download answer file
log_step "Downloading answer file from $answer_url"
send "wget -O /tmp/answers.txt $answer_url\r"
expect {
    -re "saved" {
        log_step "Answer file downloaded successfully"
    }
    timeout {
        puts "ERROR: Answer file download timeout"
        exit 1
    }
}
sleep 1

# Verify answer file downloaded
send "ls -lh /tmp/answers.txt\r"
expect {
    -re "answers\\.txt" {
        # File exists, continue
    }
    timeout {
        puts "ERROR: Answer file not found"
        exit 1
    }
}
sleep 1

# Run setup-alpine with answer file
log_step "Running setup-alpine with answer file"
send "setup-alpine -f /tmp/answers.txt\r"

# Wait for command echo to complete before looking for prompts
sleep 5

set timeout 600

# Root password for template access
set root_password "LifeWithAlacrity2025"

# Monitor installation progress
# Match specific prompts and output, NOT generic prompts
expect {
    -nocase -re "new password:" {
        # New password prompt - send our password
        log_step "Password prompt detected - setting password"
        send "$root_password\r"
        exp_continue
    }
    -nocase -re "retype password:" {
        # Confirm password prompt - send same password
        log_step "Password confirmation - sending password"
        send "$root_password\r"
        exp_continue
    }
    -re "Bad password" {
        log_step "Password rejected - this should not happen"
        exp_continue
    }
    -re "Please retry" {
        log_step "Retry requested"
        exp_continue
    }
    -re "Setup a user.*\\?" {
        # User setup prompt - last interactive section
        log_step "User setup prompt - skipping (using root only)"
        send "no\r"
        exp_continue
    }
    -re "where to store configs" {
        # Config storage prompt (appears after DISKOPTS=none)
        log_step "Config storage prompt - sending 'none'"
        send "none\r"
        exp_continue
    }
    -re "alpine-template:~#" {
        # Back at shell prompt with new hostname - setup-alpine definitely complete
        log_step "Returned to shell prompt"
    }
    eof {
        puts "ERROR: Serial console connection closed unexpectedly"
        exit 1
    }
    timeout {
        puts "ERROR: setup-alpine timeout after 600 seconds"
        exit 1
    }
}

# setup-alpine expect block exited - we're back at the shell prompt
log_step "Setup-alpine complete (disk installation skipped)"

# Install packages required by setup-disk, plus openssh and qemu-guest-agent
# Enable community repo inline before installing (qemu-guest-agent is in community)
log_step "Enabling community repo and installing packages for disk installation and SSH access"
send "echo 'http://dl-cdn.alpinelinux.org/alpine/v3.22/community' >> /etc/apk/repositories && apk update --no-progress && apk add --no-progress e2fsprogs dosfstools grub-efi openssh qemu-guest-agent\r"
expect {
    -re "OK:.*packages" {
        log_step "All packages installed"
    }
    timeout {
        puts "ERROR: Package installation timeout"
        exit 1
    }
}
sleep 2

# SSH keys will be added via post-install script (more reliable than serial console)
log_step "Skipping SSH key setup in ISO (will be added post-install)"
sleep 1

# Now manually run setup-disk to install Alpine to /dev/vda
# Use echo piping to auto-answer the erase prompt
log_step "Running setup-disk with auto-confirm erase"
send "echo y | setup-disk -m sys /dev/vda\r"

# Give disk installation time to complete (90 seconds)
# Serial console will likely close during this, but installation continues in background
sleep 90

log_step "Disk installation complete - configuring services on installed system"

# Mount the installed system and configure services
send "mount /dev/vda3 /mnt 2>/dev/null || mount /dev/vda2 /mnt\r"
expect -re ":~#"
sleep 2

# Create .ssh directory on installed system (keys added via post-install)
log_step "Preparing SSH directory on installed system"
send "mkdir -p /mnt/root/.ssh\r"
expect -re ":~#"
send "chmod 700 /mnt/root/.ssh\r"
expect -re ":~#"
sleep 1

# Configure sshd to allow password authentication and root login
log_step "Configuring sshd for password authentication"
send "mkdir -p /mnt/etc/ssh\r"
expect -re ":~#"
send "sed -i 's/^#*PasswordAuthentication.*/PasswordAuthentication yes/' /mnt/etc/ssh/sshd_config\r"
expect -re ":~#"
send "sed -i 's/^#*PermitRootLogin.*/PermitRootLogin yes/' /mnt/etc/ssh/sshd_config\r"
expect -re ":~#"
send "grep -E '(PasswordAuthentication|PermitRootLogin)' /mnt/etc/ssh/sshd_config\r"
expect -re ":~#"
sleep 1

# Enable sshd and qemu-guest-agent in the installed system
send "chroot /mnt rc-update add sshd default\r"
expect -re ":~#"
send "chroot /mnt rc-update add qemu-guest-agent default\r"
expect -re ":~#"
sleep 1

# Password is already set during setup-alpine
# SSH keys will be added via post-install script (more reliable)
log_step "Installation configured - password already set during setup-alpine"
sleep 1

log_step "Services configured - ready to boot from disk"

close
exit 0
