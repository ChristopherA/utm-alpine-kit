#!/usr/bin/expect -f
# Alpine Linux automated installation using answer file
# This bypasses password prompt by using ROOTSSHKEY in answer file

set timeout 180
log_user 1

proc log_step {msg} {
    puts "\n==> $msg\n"
}

# Get host IP for answer file URL (expect script detects it directly)
set host_ip "192.168.1.1"
catch {
    set host_ip [exec sh -c "ipconfig getifaddr en0 || ipconfig getifaddr en1"]
}

set answer_url "http://${host_ip}:8888/alpine-answer.txt"
log_step "Answer file URL: $answer_url"

# Connect to VM serial console
log_step "Connecting to VM serial console"
spawn nc localhost 4444

# Wait for login prompt and login as root
send "\r"
expect {
    -re "login:" {
        send "root\r"
        expect -re "#"
    }
    timeout {
        puts "ERROR: Timeout waiting for login prompt"
        exit 1
    }
}

# Configure network to reach answer file server
log_step "Configuring network (DHCP)"
send "setup-interfaces\r"
sleep 1
expect {
    -re "initialize" { send "eth0\r"; exp_continue }
    -re "Ip address" { send "dhcp\r"; exp_continue }
    -re "manual" { send "n\r"; exp_continue }
    -re "#" {}
    timeout {
        puts "ERROR: Network configuration timeout"
        exit 1
    }
}

send "ifup eth0\r"
expect -re "#"
sleep 3

# Verify network connectivity
log_step "Verifying network connectivity"
send "ip addr show eth0 | grep 'inet '\r"
expect -re "#"

# Setup APK repositories
log_step "Configuring APK repositories"
send "setup-apkrepos -1\r"
expect {
    -re "mirror" { send "1\r"; exp_continue }
    -re "#" {}
    timeout {
        puts "ERROR: APK repository setup timeout"
        exit 1
    }
}

send "apk update\r"
expect -re "#"

# Install wget to download answer file
log_step "Installing wget"
send "apk add wget\r"
expect {
    -re "#" {}
    timeout {
        puts "ERROR: wget installation timeout"
        exit 1
    }
}

# Download answer file
log_step "Downloading answer file from $answer_url"
send "wget -O /tmp/answers.txt $answer_url\r"
expect {
    -re "saved" {
        log_step "Answer file downloaded successfully"
        expect -re "#"
    }
    -re "#" {}
    timeout {
        puts "ERROR: Answer file download timeout"
        exit 1
    }
}

# Verify answer file
send "cat /tmp/answers.txt\r"
expect -re "#"

# Run setup-alpine with answer file
log_step "Running setup-alpine with answer file"
send "setup-alpine -f /tmp/answers.txt\r"

set timeout 300

# Monitor installation progress
# Note: setup-alpine may prompt for root password even with ROOTSSHKEY
expect {
    -re "password.*root" {
        log_step "Skipping root password prompt (will set via SSH later)"
        send "\r"
        exp_continue
    }
    -re "Retype password:" {
        send "\r"
        exp_continue
    }
    -re "Bad password" {
        log_step "Password skipped (using SSH key authentication)"
        exp_continue
    }
    -re "password.*unchanged" {
        log_step "Password unchanged (SSH key will be used)"
        exp_continue
    }
    -re "Erase.*\\?" {
        log_step "Confirming disk erase"
        send "y\r"
        exp_continue
    }
    -re "complete" {
        log_step "Setup-alpine completed"
        expect -re "#"
    }
    -re "#" {
        log_step "Setup-alpine finished (returned to prompt)"
    }
    timeout {
        puts "ERROR: setup-alpine timeout"
        exit 1
    }
}

log_step "Answer file installation complete"

# Now run setup-disk in same session (DISKOPTS doesn't auto-execute)
log_step "Running setup-disk to install to /dev/vda"
send "setup-disk -m sys /dev/vda\r"

set timeout 180

expect {
    -re "Which disk.*\\?" {
        log_step "Confirming disk: /dev/vda"
        send "/dev/vda\r"
        exp_continue
    }
    -re "continue\\?" {
        log_step "Confirming disk erase"
        send "y\r"
        exp_continue
    }
    -re "where to store configs" {
        log_step "Skipping config storage (using none)"
        send "none\r"
        exp_continue
    }
    -re "apk cache directory" {
        log_step "Skipping apk cache (using none)"
        send "none\r"
        exp_continue
    }
    -re "Installation is complete" {
        log_step "Disk installation complete!"
        expect -re "#"
    }
    -re "#" {
        log_step "Returned to prompt - installation may be complete"
    }
    timeout {
        puts "ERROR: Disk installation timeout"
        exit 1
    }
}

log_step "Full installation complete (answer file + disk)"

close
exit 0
